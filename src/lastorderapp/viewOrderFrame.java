/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lastorderapp;

import java.awt.Color;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import static lastorderapp.LastOrderApp.addToolsToOrders;
import static lastorderapp.LastOrderApp.stmt;
import static lastorderapp.OrderPanel.selectedColumn;
import lastorderapp.database.Orders;
import lastorderapp.database.Tools;
import lastorderapp.database.Workers;

/**
 *
 * @author doomsayer
 */
public class viewOrderFrame extends javax.swing.JFrame {

    /**
     * Creates new form viewOrderFrame
     */
    public viewOrderFrame() throws SQLException {
        initComponents();
        departmentsComboBox.setVisible(false);
        int selectedOrder = selectedColumn + 1;
        orderNumberLabel.setText("ORDER #" + selectedOrder);
        this.setLocationRelativeTo(null);
        toolsAlertLabel.setVisible(false);
        workerAlertLabel.setVisible(false);
        updateTables();
        //workersQuery1 = java.beans.Beans.isDesignTime() ? null : LastOrderAppPUEntityManager.createQuery("SELECT w FROM Workers w");
        //workersList1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : workersQuery1.getResultList();
        

    }
    
    public List findWithName() {
        int selectedOrder = selectedColumn + 1;
        return LastOrderAppPUEntityManager.createQuery(
            "SELECT w FROM Workers w").getResultList();
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        LastOrderAppPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("LastOrderAppPU").createEntityManager();
        ordersQuery = java.beans.Beans.isDesignTime() ? null : LastOrderAppPUEntityManager.createQuery("SELECT o FROM Orders o");
        ordersList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : ordersQuery.getResultList();
        workersQuery = java.beans.Beans.isDesignTime() ? null : LastOrderAppPUEntityManager.createQuery("SELECT w FROM Workers w");
        workersList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : workersQuery.getResultList();
        toolsQuery = java.beans.Beans.isDesignTime() ? null : LastOrderAppPUEntityManager.createQuery("SELECT t FROM Tools t");
        toolsList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : toolsQuery.getResultList();
        workersQuery2 = java.beans.Beans.isDesignTime() ? null : LastOrderAppPUEntityManager.createQuery("SELECT o.workersCollection FROM Orders o WHERE o.id = " + (selectedColumn + 1));
        workersList2 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : workersQuery2.getResultList();
        departmentsQuery = java.beans.Beans.isDesignTime() ? null : LastOrderAppPUEntityManager.createQuery("SELECT d FROM Departments d");
        departmentsList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : departmentsQuery.getResultList();
        toolsQuery1 = java.beans.Beans.isDesignTime() ? null : LastOrderAppPUEntityManager.createQuery("SELECT o.toolsCollection FROM Orders o WHERE o.id = " + (selectedColumn + 1));
        toolsList1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : toolsQuery1.getResultList();
        jScrollPane1 = new javax.swing.JScrollPane();
        workerTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        toolTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        workersComboBox = new javax.swing.JComboBox<>();
        addWorkerToTheOrder = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        toolsComboBox = new javax.swing.JComboBox<>();
        addToolToTheOrder = new javax.swing.JButton();
        Close = new javax.swing.JButton();
        orderNumberLabel = new javax.swing.JLabel();
        departmentsComboBox = new javax.swing.JComboBox<>();
        ordersComboBox = new javax.swing.JComboBox<>();
        workerAlertLabel = new javax.swing.JLabel();
        toolsAlertLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0};
        layout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0};
        getContentPane().setLayout(layout);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(200, 200));

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, workersList2, workerTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${workerId}"));
        columnBinding.setColumnName("Worker Id");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${workerName}"));
        columnBinding.setColumnName("Worker Name");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${workerPosition}"));
        columnBinding.setColumnName("Worker Position");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${workerDepartment}"));
        columnBinding.setColumnName("Worker Department");
        columnBinding.setColumnClass(lastorderapp.database.Departments.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(workerTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(200, 200));

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, toolsList1, toolTable);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${toolId}"));
        columnBinding.setColumnName("Tool Id");
        columnBinding.setColumnClass(java.math.BigDecimal.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${toolName}"));
        columnBinding.setColumnName("Tool Name");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane2.setViewportView(toolTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        getContentPane().add(jScrollPane2, gridBagConstraints);

        jLabel1.setText("Workers");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        getContentPane().add(jLabel1, gridBagConstraints);

        jLabel2.setText("Tools");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        getContentPane().add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        getContentPane().add(jSeparator3, gridBagConstraints);

        jLabel3.setText("Add new worker");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        getContentPane().add(jLabel3, gridBagConstraints);

        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, workersList, workersComboBox);
        bindingGroup.addBinding(jComboBoxBinding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(workersComboBox, gridBagConstraints);

        addWorkerToTheOrder.setText("Add worker to the order");
        addWorkerToTheOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWorkerToTheOrderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(addWorkerToTheOrder, gridBagConstraints);

        jLabel4.setText("Add new tool");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 8;
        getContentPane().add(jLabel4, gridBagConstraints);

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, toolsList, toolsComboBox);
        bindingGroup.addBinding(jComboBoxBinding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(toolsComboBox, gridBagConstraints);

        addToolToTheOrder.setText("Add tool to the order");
        addToolToTheOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToolToTheOrderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(addToolToTheOrder, gridBagConstraints);

        Close.setText("Close");
        Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        getContentPane().add(Close, gridBagConstraints);

        orderNumberLabel.setText("ORDER #");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 9;
        getContentPane().add(orderNumberLabel, gridBagConstraints);

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, departmentsList, departmentsComboBox);
        bindingGroup.addBinding(jComboBoxBinding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 6;
        getContentPane().add(departmentsComboBox, gridBagConstraints);

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ordersList, ordersComboBox);
        bindingGroup.addBinding(jComboBoxBinding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 2;
        getContentPane().add(ordersComboBox, gridBagConstraints);

        workerAlertLabel.setText("jLabel5");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(workerAlertLabel, gridBagConstraints);

        toolsAlertLabel.setText("jLabel6");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(toolsAlertLabel, gridBagConstraints);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void updateTables() throws SQLException{
        int selectedOrder = selectedColumn + 1;
        ordersComboBox.setSelectedIndex(selectedColumn);
        ordersComboBox.setVisible(false);
        Orders order = (Orders) ordersComboBox.getSelectedItem();
//        
//        
//        Collection orwk = order.getWorkersCollection();
//        
//        
//        DefaultTableModel modelWorkersTable = (DefaultTableModel) workerTable.getModel();
//        modelWorkersTable.setRowCount(0);
//        Object workersTableRowData[] = new Object[4];
//        for (Object w : orwk) {
//            workersTableRowData[0] = ((Workers)w).getWorkerId();
//            workersTableRowData[1] = ((Workers)w).getWorkerName();
//            workersTableRowData[2] = ((Workers)w).getWorkerPosition();
//            workersTableRowData[3] = ((Workers)w).getWorkerDepartment();
//            modelWorkersTable.addRow(workersTableRowData);
//        }
//        
//        Collection ortl = order.getToolsCollection();
//       
//        
//        DefaultTableModel modelToolsTable = (DefaultTableModel) toolTable.getModel();
//        modelToolsTable.setRowCount(0);
//        Object toolsTableRowData[] = new Object[2];
//        for (Object t : ortl) {
//            toolsTableRowData[0] = ((Tools)t).getToolId();
//            toolsTableRowData[1] = ((Tools)t).getToolName();
//            modelToolsTable.addRow(toolsTableRowData);
//        }
//        
//        
//        
//        
//        
//        
//        
//        
    }
    
    private void CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseActionPerformed
        // TODO add your handling code here:
        OrderApplication OrderApplication = new OrderApplication();
        OrderApplication.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_CloseActionPerformed

    private void addWorkerToTheOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addWorkerToTheOrderActionPerformed
        // TODO add your handling code here:
        Workers selectedWorker = (Workers) workersComboBox.getSelectedItem();
        int selectedWorkerID = selectedWorker.getWorkerId().intValue();
        int selectedOrder = selectedColumn + 1;
        try {
            LastOrderApp.addWorkersToOrders(selectedOrder, selectedWorkerID);
            //updateTables();
            viewOrderFrame viewOrderFrame = new viewOrderFrame();
            viewOrderFrame.setVisible(true);
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(viewOrderFrame.class.getName()).log(Level.SEVERE, null, ex);
            workerAlertLabel.setText("This worker is already in the order");
            workerAlertLabel.setForeground(Color.red);
            workerAlertLabel.setVisible(true);
        }
        
    }//GEN-LAST:event_addWorkerToTheOrderActionPerformed

    private void addToolToTheOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToolToTheOrderActionPerformed
        // TODO add your handling code here:
        Tools selectedTool = (Tools) toolsComboBox.getSelectedItem();
        int selectedToolID = selectedTool.getToolId().intValue();
        int selectedOrder = selectedColumn + 1;
        try {
            LastOrderApp.addToolsToOrders(selectedOrder, selectedToolID);
            //updateTables();
            viewOrderFrame viewOrderFrame = new viewOrderFrame();
            viewOrderFrame.setVisible(true);
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(viewOrderFrame.class.getName()).log(Level.SEVERE, null, ex);
            toolsAlertLabel.setText("This tool is already in the order");
            toolsAlertLabel.setForeground(Color.red);
            toolsAlertLabel.setVisible(true);
        }
        
    }//GEN-LAST:event_addToolToTheOrderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new viewOrderFrame().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(viewOrderFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Close;
    private javax.persistence.EntityManager LastOrderAppPUEntityManager;
    private javax.swing.JButton addToolToTheOrder;
    private javax.swing.JButton addWorkerToTheOrder;
    private javax.swing.JComboBox<String> departmentsComboBox;
    private java.util.List<lastorderapp.database.Departments> departmentsList;
    private javax.persistence.Query departmentsQuery;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel orderNumberLabel;
    private javax.swing.JComboBox<String> ordersComboBox;
    private java.util.List<lastorderapp.database.Orders> ordersList;
    private javax.persistence.Query ordersQuery;
    private javax.swing.JTable toolTable;
    private javax.swing.JLabel toolsAlertLabel;
    private javax.swing.JComboBox<String> toolsComboBox;
    private java.util.List<lastorderapp.database.Tools> toolsList;
    private java.util.List<lastorderapp.database.Tools> toolsList1;
    private javax.persistence.Query toolsQuery;
    private javax.persistence.Query toolsQuery1;
    private javax.swing.JLabel workerAlertLabel;
    private javax.swing.JTable workerTable;
    private javax.swing.JComboBox<String> workersComboBox;
    private java.util.List<lastorderapp.database.Workers> workersList;
    private java.util.List<lastorderapp.database.Workers> workersList2;
    private javax.persistence.Query workersQuery;
    private javax.persistence.Query workersQuery2;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
